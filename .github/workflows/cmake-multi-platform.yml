name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      # Build for Linux and Windows
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        include:
          - os: windows-latest
            artifact: win
            c_compiler: cl
            cpp_compiler: cl
            cuda_compiler: nvcc
          - os: ubuntu-latest
            artifact: linux
            c_compiler: gcc
            cpp_compiler: g++
            cuda_compiler: nvcc

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libwayland-dev libxkbcommon-dev

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "build-install-dir=${{ github.workspace }}/instdir" >> "$GITHUB_OUTPUT"
        echo "archive-name=${{ github.event.repository.name }}-${{ matrix.artifact }}-${GITHUB_REF#refs/tags/}" >> "$GITHUB_OUTPUT"

    - name: Get latest CMake and Ninja
      uses: lukka/get-cmake@latest

    - name: Install CUDA toolkit
      uses: Jimver/cuda-toolkit@v0.2.19

    - name: Run vcpkg
      uses: lukka/run-vcpkg@v11

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CUDA_COMPILER=${{ matrix.cuda_compiler }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Install
      run: cmake --install ${{ steps.strings.outputs.build-output-dir }} --prefix ${{ steps.strings.outputs.build-install-dir }} --strip

    - name: Pack
      run: |
        cmake -E tar cfv ./${{ steps.strings.outputs.archive-name }}.zip --format=zip ${{ steps.strings.outputs.build-install-dir }}
        cmake -E tar cfvz ./${{ steps.strings.outputs.archive-name }}.tar.gz --format=gnutar ${{ steps.strings.outputs.build-install-dir }}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        path: |
          ./${{ steps.strings.outputs.archive-name }}.zip
          ./${{ steps.strings.outputs.archive-name }}.tar.gz
        name: ${{ matrix.artifact }}

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-with-dirs

    - name: Fixup artifacts
      run: |
        mkdir release
        mv release-with-dirs/*/* release/

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: release/*
        draft: false
        prerelease: false
